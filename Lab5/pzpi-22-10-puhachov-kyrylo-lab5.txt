Міністерство освіти та науки України
Харківський національний університет радіоелектроніки





Кафедра програмної інженерії


ЗВІТ
до лабораторної роботи №5 з дисципліни
«Архітектура програмного забезпечення»
На тему: «Презентація готового проекта»




Виконав:
ст. гр. ПЗПІ-22-10
Пугачов Кирило Вадимович

Перевірив:
ас. кафедри ПІ
Дашенков Дмитро Сергійович




Харків 2025

 
1.	Мета роботи


Метою лабораторної роботи є підготовка й оформлення комплексного набору матеріалів, який демонструє готовність системи моніторингу стану мостів до експлуатації, а саме:
1.	Показати реальний стан реалізації функціоналу проєкту порівняно з початковими вимогами (Lab 1–Lab 4), зафіксувати «Заплановано – Реалізовано».
2.	Підготувати коротке відео-демо (4–6 хвилин), яке послідовно ілюструє ключові можливості системи: CRUD-операції, відображення графіків показників сенсорів, приклад масштабування через Docker Compose.
3.	Створити презентаційні слайди, що стисло відтворюють архітектуру системи, перелік використаних технологій, порівняння планованого й фактичного функціоналу, ілюстративні кадри з інтерфейсу та графіків, а також посилання на відео-демо.
4.	Оформити письмовий звіт, який містить:
	короткий опис системи;
	таблицю «Заплановано – Реалізовано» з коментарями щодо поточного статусу кожної функції;
	опис структури відео-демо й інструкцію, як переглянути запис;
	висновки щодо продуктивності та стійкості системи до навантажень, а також подальші кроки розвитку.
В результаті виконання цієї роботи буде продемонстровано завершеність проєкту, готовність інфраструктури до розгортання в режимі продакшн, а також наявність усіх необхідних матеріалів для захисту й подальшої передачі системи замовнику.
 
2. Опис проєкту загалом
2.1 Коротка характеристика системи


Система моніторингу стану мостів призначена для централізованого збору, зберігання та аналізу даних, що надходять від набору сенсорів, встановлених на інженерних спорудах. Головна мета — своєчасно виявляти потенційні проблеми (деформації, перевищення вібрацій, температурних аномалій тощо) і забезпечувати інспекторів інструментами для прийняття обґрунтованих рішень щодо технічного обслуговування. Користувачі можуть переглядати всю інформацію про мости, інспекторів та датчики, виконувати CRUD-операції з ключовими сутностями та аналізувати історію значень показників у вигляді інтерактивних графіків.
2.2 Перелік основних компонентів
1.	Бекенд (серверна частина)
o	Реалізований на ASP.NET Core (.NET 5), містить
	моделі даних (Bridge, Inspector, Sensor, SensorData, SensorType),
	контролери REST API для кожної сутності,
	логіку збереження й отримання даних із бази PostgreSQL,
	механізм автоматичного застосування міграцій (EnsureCreated / Migrate).
	Запущений у Docker-контейнері, що дозволяє легко масштабувати кількість екземплярів.
2.	База даних
	PostgreSQL 15, розгорнута як окремий сервіс у docker-compose.
	Зберігає інформацію про мости, інспекторів, типи сенсорів і самі показники, що надходять.
	Для даних сенсорів використовується окрема таблиця SensorData з індексом на timestamp для прискорення вибірок за часовими діапазонами.
3.	Фронтенд (клієнтська частина)
	React SPA (Single Page Application), компонентна архітектура із використанням Material-UI.
	Забезпечує інтерфейси для:
	перегляду та керування сутностями (мости, інспектори, сенсори),
	візуалізації історичних даних через інтерактивні графіки Chart.js,
	фільтрації, сортування та пошуку в табличних компонентах.
	Підключений до бекенду через Axios (HTTP-запити до REST API).
4.	Контейнеризація (Docker, Docker Compose)
	Dockerfile для бекенду — двоступенева збірка (Build & Runtime).
	docker-compose.yml визначає сервіси:
	app (бекенд),
	db (PostgreSQL).
	Дає можливість запускати кілька екземплярів сервера (docker-compose up --scale app=2) для горизонтального масштабування.
5.	Навантаговувальне тестування
	Locust (Python-скрипт locustfile.py), що симулює одночасну роботу сотні віртуальних користувачів.
	Тести включають запити до сценаріїв:
	отримання списку всіх мостів,
	отримання списку всіх сенсорів (або за конкретним мостом).
	Дає оцінку стійкості системи під навантаженням (час відповіді, кількість помилок).
6.	Мобільна компонента (за можливості, у наступних випусках)
	У початковому релізі реалізовано базовий MVP-вигляд: відображає список мостів, і для кожного — інспекторів та сенсори.
	Працює як PWA або окремий мобільний фронтенд, що використовує ті самі REST API.
2.3 Використані технології
	ASP.NET Core (.NET 5) — середовище виконання для створення веб-API, яке обробляє бізнес-логіку та запити від клієнтів.
	Entity Framework Core (Npgsql EF Core Provider) — ORM для зв’язку з PostgreSQL, налаштовано EnableRetryOnFailure() для стійкого підключення у Docker.
	PostgreSQL 15 — реляційна СУБД, обрана за надійність і можливість роботи з великими обсягами даних сенсорів.
	Docker, Docker Compose — інструменти для контейнеризації бекенду та бази даних, що полегшують розгортання, масштабування й забезпечують ізольоване середовище.
	React — бібліотека для побудови клієнтського SPA, яка дозволяє розбити інтерфейс на багаторівневі компоненти.
	Material-UI — набір готових React-компонентів для створення привабливого та послідовного дизайну.
	Chart.js — бібліотека для побудови інтерактивних графіків у браузері, що дозволяє відображати історичні дані сенсорів.
	Axios — клієнт для виконання HTTP-запитів до бекенду (GET, POST, PUT, DELETE).
	Locust — фреймворк для навантажувального тестування, що генерує профільовані запити від віртуальних користувачів.


5.	Запланований функціонал і фактична реалізація


У цьому розділі наводиться порівняння функцій, що були визначені на початкових етапах (Lab 1–Lab 4), з тими, які фактично реалізовані на поточному етапі. Для зручності представлено таблицю «Заплановано – Реалізовано» з короткими коментарями до кожного пункту.

4.1 Перелік запланованих функцій
1)	CRUD-операції для сутностей
a)	Мости
b)	Інспектори
c)	Сенсори
d)	Типи сенсорів
e)	Дані сенсорів
2)	Візуалізація даних сенсорів
a)	Лінійні графіки (Chart.js) з можливістю вибору періоду (добу, тиждень, місяць)
b)	Інтерактивні підказки (hover) для точного значення у певний момент
3)	Масштабування бекенда
a)	Контейнеризація серверної частини (Dockerfile)
b)	Конфігурація docker-compose.yml для одночасного запуску бекенду й PostgreSQL
c)	Можливість запуску декількох екземплярів сервера (docker-compose up --scale app=2)
4)	Навантаговувальне тестування (Locust)
a)	Сценарій із запитами до /api/bridges і /api/sensors
b)	Підтримка запуску в браузері та у headless-режимі
c)	Оцінка середнього часу відповіді й відсотка помилок
5)	Мобільна частина (MVP)
a)	Перегляд списку мостів
b)	Для кожного мосту — перелік інспекторів і сенсорів
c)	Базові навігація та адаптивний інтерфейс
6)	Інтеграція штучного інтелекту (відкладено)
a)	Збір даних із сенсорів для подальшого навчання
b)	Прогнозування аномалій у показниках
c)	Аналіз зовнішніх факторів (погодні, транспорт)


4.2 Таблиця «Заплановано – Реалізовано»
№	Функція	Статус	Коментар
1	CRUD-операції для «Мости»	Реалізовано	Усі ендпоінти (GET, POST, PUT, DELETE) працюють, UI має відповідні форми й таблиці.
2	CRUD-операції для «Інспектори»	Реалізовано	Контролер і витяги з БД налаштовані, UI-форма для додавання/редагування доступні.
3	CRUD-операції для «Сенсори»	Реалізовано	Додано компонент для прив’язки сенсорів до мостів, таблиця з фільтрацією й пошуком.
4	CRUD-операції для «Типи сенсорів»	Реалізовано	Можна додавати типи, вказувати одиниці вимірювання, переглядати й видаляти.
5	CRUD-операції для «Дані сенсорів»	Реалізовано	Показані останні значення, можливість видалення; створення даних здійснюється автоматично.
6	Візуалізація даних (Chart.js)	Реалізовано	Лінійні графіки історії даних за вибраний період (добу/тиждень/місяць) працюють безпомилково.
7	Dockerfile для бекенду	Реалізовано	Двоетапна збірка: збірка й публікація в контейнері, запуск у aspnet:5.0.
8	docker-compose.yml із сервісами app і db	Реалізовано	PostgreSQL і ASP.NET Core запускалися одночасно, налаштовано змінні середовища.
9	Масштабування серверного застосунку	Реалізовано	Виконано docker-compose up --scale app=2: два екземпляри сервера коректно обробляють запити.
10	Навантаговувальний тест (Locust)	Реалізовано	Тестовий скрипт із двома сценаріями працює, наведені результати: 100 користувачів, 0 % помилок.
11	Мобільна частина (MVP)	У розробці	Реалізовано базовий перегляд мостів і сенсорів; відсутні CRUD-операції з мобільного.
12	Інтеграція штучного інтелекту	Не реалізовано	Відкладено на наступні релізи; дані для аналізу зібрано, але моделі ще не навчені.


4.3 Короткі коментарі


	CRUD-операції (пункти 1–5): усі ключові сутності підтримують повний набір REST-методів. Фронтенд реалізовано на React із компонентами Material-UI, тож форми й таблиці працюють швидко та безпомилково.
	Візуалізація даних (пункт 6): Chart.js інтегровано у відповідний компонент — користувач може вибирати часовий інтервал (добу, тиждень, місяць) і бачити історію зміни показників із підказками при наведенні.
	Dockerfile та docker-compose (пункти 7–9): контейнеризація повністю налаштована. За допомогою docker-compose up --scale app=2 було перевірено горизонтальне масштабування: запити рівномірно розподіляються між двома інстансами сервера (журнали показують Round Robin).
	Навантаговувальний тест (пункт 10): Locust-скрипт моделює 100 одночасних користувачів із частотою 10/сек. Середній час відповіді — близько 200 мс; максимальний піковий — до 600 мс. Помилок не зафіксовано. Це означає, що система здатна витримувати базове навантаження в таких умовах.
	Мобільна частина (пункт 11): реалізовано мінімальний MVP: перегляд списку мостів та перелік сенсорів/інспекторів. Повнофункціональні CRUD із мобільного інтерфейсу трохи затрималися через пріоритетність бекенду.
	Інтеграція ШІ (пункт 12): заплановано, але не реалізовано. Дані вже зберігаються в PostgreSQL у вигляді, зручному для подальшого навчання моделей (часова позначка, значення, тип сенсора).

 
ДОДАТОК А
Слайди презентації

 
Рисунок 1 – Вступ

 
Рисунок 2 – Короткий опис системи

 
Рисунок 3 – Використані технології

 
Рисунок 4 – Заплановане та реалізоване

 
Рисунок 5 – Приклад CRUD-операцій

 
Рисунок 6 – Приклад графіку сенсорів

  Рисунок 7 – Мобільна частина

 
Рисунок 8 – Висновок
 
ДОДАТОК Б
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/X7Ic4xyIz0U
Хронологічний опис доповіді:
00:00 - Вступ до презентації 
00:15 - Короткий опис системи 
00:41 - Використані технології 
01:00 - Заплановане і реалізоване 
01:43 - Приклад CRUD-операцій 
02:21 - Приклад графіку сенсорів 
02:30 - Мобільна частина 
02:50 - Висновок 
03:07 - Демонстрація роботи фронтенду 
04:43 - Демонстрація роботи бекенду 
08:45 - Демонстрація роботи мобільного додатку 
09:25 - Демонстрація роботи IoT
