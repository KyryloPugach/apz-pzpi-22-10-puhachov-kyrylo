Міністерство освіти та науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії



ЗВІТ
з практичного завдання № 1
з дисципліни «Архітектура програмного забезпечення»
на тему «Патерни проєктування»




 
Виконав:
студент групи ПЗПІ-22-10
Пугачов К. В.

Перевірив:
ст. викл. каф. ПІ
Сокорчук І.П.
 








Харків 2025
1 Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	06.06.2025	0.1	Створено розділи «Історія змін», «Завдання».
2	06.06.2025	0.2	Заповнено розділи «Опис виконаної роботи», «Висновки».
3	07.06.2025	0.3	Додано у додаток А посилання на відео, описано його хронологію. У додаток Б додано зображення слайдів та підписи. У додаток В винесено приклад коду.
     
2 ЗАВДАННЯ
1. Створити для виконання завдань з дисципліни GitHub репозиторій.
2. Створити та заповнити файл README.md.
3. Обрати патерн проєктування ПЗ із книг: Ґамма, “ООП. Патерни проєктування”, GoF для доповіді.
4. Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ».
5. Створити та оформити слайди презентації доповіді.
6. Створити та опублікувати на YouTube відеозапис доповіді.
7. Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub.
8. Завантажити у піддиректорію увесь програмний код, який розглядається у доповіді.
9. Оформити та завантажити на dl.nure.ua звіт до виконаної роботи.

3 ОПИС ВИКОНАНОЇ РОБОТИ
1. Для виконання першого практичного заняття та більш детального вивчення було обрано «Адаптер» як патерн проєктування ПЗ.
2. Вивчено структуру патерну «Адаптер» та розроблено схему, яка її відображає.
3. Проаналізовано проблеми, що вирішує патерн, умови його застосування.
4. Досліджено варіанти реалізації патерну «Адаптер».
5. Визначено переваги та недоліки обраного патерну.
6. Підготовано приклади коду, які демонструють, як можна застосовувати та реалізувати патерн на практиці. 
7. Створено презентацію, що містить детальний аналіз обраного патерну проєктування.
     
4 ВИСНОВКИ
Під час виконання практичної роботи були вивчені патерни проєктування програмного забезпечення. Для більш детального ознайомлення та аналізу було обрано патерн «Адаптер». На основі вивченого матеріалу було створено презентацію, що містить основну інформацію про патерн та кодові приклади (див. додаток В) його реалізації та застосування. Повні слайди презентації наведено у додатку Б.



 
ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/Lj4Kio3wYAg
Хронологічний опис доповіді:
00:00 - Тема доповіді.
00:08 - Вступ 
01:16 - Класифікації патернів 
02:24 - Опис патерну Адаптер 
03:10 - Структура патерну 
04:41 - Проблеми, що вирішує патерн 
05:38 - Варіанти реалізації 
07:02 - Переваги та недоліки патерну Адаптер 
07:50 - Приклад реалізації Адаптера 
08:51 - Висновки 
10:24 - Використані джерела


 
ДОДАТОК Б
Слайди презентації
 
Рисунок Б.1 – Тема доповіді

Рисунок Б.2 – Вступ
 
Рисунок Б.3 – Класифікації патернів
   
Рисунок Б.4 – Опис патерну Адаптер
 
Рисунок Б.5 – Структура патерну

Рисунок Б.6 – Проблеми, що вирішує патерн
 
Рисунок Б.7 – Варіанти реалізації

Рисунок Б.8 – Переваги та недоліки патерну Адаптер

Рисунок Б.9 – Приклад реалізації Адаптера

Рисунок Б.10 – Висновки
 
Рисунок Б.11 – Використані джерела

 
ДОДАТОК В

Приклади програмного коду

GitHub репозиторій: https://github.com/KyryloPugach/apz-pzpi-22-10-puhachov-kyrylo/blob/main/Pract1/pzpi-22-10-puhachov-kyrylo-design-pattern/CodeExample.java

// 1. Цільовий інтерфейс (який очікує наша система)
interface Logger {
    void log(String message, String level);
    void error(String message);
}

// 2. Стороння бібліотека (несумісний інтерфейс)
class LegacyLogger {
    public void logToConsole(String text, String severity, String date) {
        System.out.println("[" + date + "][" + severity + "] " + text);
    }
}

// 3. Адаптер (перекладає наш інтерфейс у формат LegacyLogger)
class LoggerAdapter implements Logger {
    private LegacyLogger legacyLogger;
    
    public LoggerAdapter(LegacyLogger legacyLogger) {
        this.legacyLogger = legacyLogger;
    }
    
    @Override
    public void log(String message, String level) {
        legacyLogger.logToConsole(message, level, new Date().toString());
    }
    
    @Override
    public void error(String message) {
        legacyLogger.logToConsole(message, "ERROR", new Date().toString());
    }
}

// 4. Використання
public class Main {
    public static void main(String[] args) {
        LegacyLogger oldLogger = new LegacyLogger();
        Logger logger = new LoggerAdapter(oldLogger);
        
        logger.log("Запуск системи", "INFO");
        logger.error("Помилка з'єднання");
    }
}
